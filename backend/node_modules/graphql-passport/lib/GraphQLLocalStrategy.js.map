{"version":3,"sources":["../src/GraphQLLocalStrategy.ts"],"names":["GraphQLLocalStrategy","PassportStrategy","constructor","options","verify","passReqToCallback","TypeError","name","authenticate","req","username","email","password","done","err","user","info","error","fail","success"],"mappings":";;;;;;;AACA;;AADA;AA0BA,MAAMA,oBAAN,SAAkGC,0BAAlG,CAAmH;AAIjHC,EAAAA,WAAW,CACTC,OADS,EAETC,MAFS,EAGT;AACA;;AAEA,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjC,WAAKC,MAAL,GAAcD,OAAd;AACA,WAAKE,iBAAL,GAAyB,KAAzB;AACD,KAHD,MAGO;AACL,WAAKD,MAAL,GAAcA,MAAd;AACA,WAAKC,iBAAL,GAAyBF,OAAO,CAACE,iBAAjC;AACD;;AACD,QAAI,CAAC,KAAKD,MAAV,EAAkB;AAChB,YAAM,IAAIE,SAAJ,CAAc,iDAAd,CAAN;AACD;;AAED,SAAKC,IAAL,GAAY,eAAZ;AACD;;AAQDC,EAAAA,YAAY,CAACC,GAAD,EAAeN,OAAf,EAAiF;AAC3F,UAAM;AAAEO,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,QAAgCT,OAAtC;;AAEA,UAAMU,IAAI,GAAG,CAACC,GAAD,EAAaC,IAAb,EAAsBC,IAAtB,KAA8C;AACzD,UAAIF,GAAJ,EAAS;AACP,eAAO,KAAKG,KAAL,CAAWH,GAAX,CAAP;AACD;;AACD,UAAI,CAACC,IAAL,EAAW;AACT,eAAO,KAAKG,IAAL,CAAUF,IAAV,EAAgB,GAAhB,CAAP;AACD;;AACD,aAAO,KAAKG,OAAL,CAAaJ,IAAb,EAAmBC,IAAnB,CAAP;AACD,KARD;;AAUA,QAAI,KAAKX,iBAAT,EAA4B;AAC1B;AACA,WAAKD,MAAL,CAAYK,GAAZ,EAAiBC,QAAQ,IAAIC,KAA7B,EAAoCC,QAApC,EAA8CC,IAA9C;AACD,KAHD,MAGO;AACL;AACA,WAAKT,MAAL,CAAYM,QAAQ,IAAIC,KAAxB,EAA+BC,QAA/B,EAAyCC,IAAzC;AACD;AACF;;AAlDgH;;eAqDpGb,oB","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { Strategy as PassportStrategy } from 'passport-strategy';\nimport { Request as ExpressRequest } from 'express';\nimport { PassportContext, InfoArgument } from './types';\n\ntype DoneFn = (error: any, user?: any, info?: InfoArgument) => void;\ntype VerifyFn = (username: unknown, password: unknown, done: DoneFn) => void;\ntype VerifyFnWRequest = <U extends {}, Request extends object = ExpressRequest>(\n  req: Request | PassportContext<U, Request>,\n  username: unknown,\n  password: unknown,\n  done: DoneFn,\n) => void;\n\ninterface GraphQLLocalStrategyOptions {\n  passReqToCallback?: boolean;\n}\n\ninterface GraphQLLocalStrategyOptionsWithRequest extends GraphQLLocalStrategyOptions {\n  passReqToCallback: true;\n}\n\ninterface GraphQLLocalStrategyOptionsWithoutRequest extends GraphQLLocalStrategyOptions {\n  passReqToCallback?: false;\n}\n\nclass GraphQLLocalStrategy<U extends {}, Request extends ExpressRequest = ExpressRequest> extends PassportStrategy {\n  constructor(verify: VerifyFn);\n  constructor(options: GraphQLLocalStrategyOptionsWithoutRequest, verify: VerifyFn);\n  constructor(options: GraphQLLocalStrategyOptionsWithRequest, verify: VerifyFnWRequest);\n  constructor(\n    options?: GraphQLLocalStrategyOptions | VerifyFn | VerifyFnWRequest,\n    verify?: VerifyFn | VerifyFnWRequest,\n  ) {\n    super();\n\n    if (typeof options === 'function') {\n      this.verify = options;\n      this.passReqToCallback = false;\n    } else {\n      this.verify = verify;\n      this.passReqToCallback = options.passReqToCallback;\n    }\n    if (!this.verify) {\n      throw new TypeError('GraphQLLocalStrategy requires a verify callback');\n    }\n\n    this.name = 'graphql-local';\n  }\n\n  verify: VerifyFn | VerifyFnWRequest;\n\n  passReqToCallback: boolean | undefined;\n\n  name: string;\n\n  authenticate(req: Request, options: { username?: string; email?: string; password: string }) {\n    const { username, email, password } = options;\n\n    const done = (err: Error, user: U, info?: InfoArgument) => {\n      if (err) {\n        return this.error(err);\n      }\n      if (!user) {\n        return this.fail(info, 401);\n      }\n      return this.success(user, info);\n    };\n\n    if (this.passReqToCallback) {\n      // @ts-ignore - not sure how tow handle this nicely in TS\n      this.verify(req, username || email, password, done);\n    } else {\n      // @ts-ignore - not sure how tow handle this nicely in TS\n      this.verify(username || email, password, done);\n    }\n  }\n}\n\nexport default GraphQLLocalStrategy;\n"],"file":"GraphQLLocalStrategy.js"}